"""
Task Scheduler Service.
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏–π –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
"""

import logging
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from sqlalchemy.ext.asyncio import AsyncSession
from app.core.database import AsyncSessionLocal
from app.core.config import settings
from app.crud import user as user_crud, assignment as assignment_crud, task as task_crud
from app.services.telegram_sender import telegram_sender

logger = logging.getLogger(__name__)


class TaskScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏–π –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        self.scheduler = AsyncIOScheduler(
            timezone=settings.SCHEDULER_TIMEZONE
        )

    async def send_morning_tasks(self):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
        –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
        """
        try:
            import sys
            print("üåÖ Starting morning tasks distribution...", flush=True)
            sys.stdout.flush()
            logger.info("Starting morning tasks distribution...")

            async with AsyncSessionLocal() as db:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users = await user_crud.get_all(db, is_active=True)

                if not users:
                    logger.info("No active users found")
                    return

                success_count = 0
                error_count = 0

                for user in users:
                    try:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ Telegram ID
                        if not user.telegram_id:
                            print(f"‚è≠Ô∏è  Skipping {user.name} - no telegram_id", flush=True)
                            sys.stdout.flush()
                            continue

                        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        assignment = await assignment_crud.get_today_assignment(
                            db, user.id
                        )

                        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ)
                        if assignment and assignment.status.value == "completed":
                            print(f"‚è≠Ô∏è  {user.name} already completed today's task", flush=True)
                            sys.stdout.flush()
                            continue

                        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏—è - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                        if not assignment:
                            print(f"üìù No assignment for {user.name}, creating new...", flush=True)
                            sys.stdout.flush()

                            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–∞—á—É
                            random_task = await task_crud.get_random_task(db)

                            if not random_task:
                                logger.error(f"No tasks available in database for user {user.id}")
                                print(f"‚ùå No tasks in database!", flush=True)
                                sys.stdout.flush()
                                error_count += 1
                                continue

                            # –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
                            assignment = await assignment_crud.create_daily_assignment(
                                db, user.id, random_task.id
                            )
                            print(f"‚úÖ Created assignment: {assignment.task.title}", flush=True)
                            sys.stdout.flush()

                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        task_data = {
                            "title": assignment.task.title,
                            "description": assignment.task.description
                        }
                        message = telegram_sender.format_morning_message(
                            user.name, task_data
                        )

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        print(f"üì§ Sending morning task to {user.name} (telegram_id: {user.telegram_id})", flush=True)
                        print(f"   Task: {assignment.task.title}", flush=True)
                        sys.stdout.flush()
                        sent = await telegram_sender.send_message(
                            chat_id=user.telegram_id,
                            text=message
                        )

                        if sent:
                            success_count += 1
                            print(f"‚úÖ Morning task sent to user {user.id}", flush=True)
                            sys.stdout.flush()
                            logger.info(f"Morning task sent to user {user.id}")
                        else:
                            error_count += 1
                            print(f"‚ùå Failed to send to user {user.id}", flush=True)
                            sys.stdout.flush()

                    except Exception as e:
                        error_count += 1
                        print(f"‚ùå Exception for user {user.id}: {str(e)}", flush=True)
                        sys.stdout.flush()
                        logger.error(f"Error sending morning task to user {user.id}: {str(e)}")

                logger.info(
                    f"Morning tasks distribution completed: "
                    f"{success_count} success, {error_count} errors"
                )

        except Exception as e:
            logger.error(f"Error in send_morning_tasks: {str(e)}")

    async def send_evening_reminders(self):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ—á–µ—Ä–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏.
        –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –≤–µ—á–µ—Ä –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
        """
        try:
            logger.info("Starting evening reminders...")

            async with AsyncSessionLocal() as db:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users = await user_crud.get_all(db, is_active=True)

                if not users:
                    logger.info("No active users found")
                    return

                success_count = 0
                error_count = 0

                for user in users:
                    try:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ Telegram ID
                        if not user.telegram_id:
                            continue

                        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                        assignment = await assignment_crud.get_today_assignment(
                            db, user.id
                        )

                        if not assignment:
                            continue

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                        if assignment.status.value != "completed":
                            task_data = {
                                "title": assignment.task.title
                            }
                            message = telegram_sender.format_evening_reminder(task_data)

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                            sent = await telegram_sender.send_message(
                                chat_id=user.telegram_id,
                                text=message
                            )

                            if sent:
                                success_count += 1
                                logger.info(f"Evening reminder sent to user {user.id}")
                            else:
                                error_count += 1

                    except Exception as e:
                        error_count += 1
                        logger.error(f"Error sending evening reminder to user {user.id}: {str(e)}")

                logger.info(
                    f"Evening reminders completed: "
                    f"{success_count} success, {error_count} errors"
                )

        except Exception as e:
            logger.error(f"Error in send_evening_reminders: {str(e)}")

    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏."""
        import sys
        print("üìã TaskScheduler.start() called", flush=True)
        sys.stdout.flush()
        logger.info("Starting task scheduler...")

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        morning_hour, morning_minute = map(
            int, settings.MORNING_TASK_TIME.split(":")
        )
        evening_hour, evening_minute = map(
            int, settings.EVENING_REMINDER_TIME.split(":")
        )

        print(f"üìã Adding morning job: {morning_hour}:{morning_minute}", flush=True)
        sys.stdout.flush()
        # –£—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        self.scheduler.add_job(
            self.send_morning_tasks,
            trigger=CronTrigger(
                hour=morning_hour,
                minute=morning_minute,
                timezone=settings.SCHEDULER_TIMEZONE
            ),
            id="morning_tasks",
            name="Send morning tasks",
            replace_existing=True
        )

        print(f"üìã Adding evening job: {evening_hour}:{evening_minute}", flush=True)
        sys.stdout.flush()
        # –í–µ—á–µ—Ä–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        self.scheduler.add_job(
            self.send_evening_reminders,
            trigger=CronTrigger(
                hour=evening_hour,
                minute=evening_minute,
                timezone=settings.SCHEDULER_TIMEZONE
            ),
            id="evening_reminders",
            name="Send evening reminders",
            replace_existing=True
        )

        print("üìã Starting scheduler...", flush=True)
        sys.stdout.flush()
        self.scheduler.start()

        jobs = self.scheduler.get_jobs()
        print(f"üìã Scheduler started with {len(jobs)} jobs", flush=True)
        for job in jobs:
            print(f"   - {job.id}: next run at {job.next_run_time}", flush=True)
        sys.stdout.flush()

        logger.info(
            f"Task scheduler started successfully. "
            f"Morning tasks: {settings.MORNING_TASK_TIME}, "
            f"Evening reminders: {settings.EVENING_REMINDER_TIME}"
        )

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        logger.info("Stopping task scheduler...")
        self.scheduler.shutdown()
        logger.info("Task scheduler stopped")


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
task_scheduler = TaskScheduler()
