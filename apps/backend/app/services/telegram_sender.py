"""
Telegram Sender Service.
–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Bot API.
"""

import logging
from typing import Optional
import httpx
from app.core.config import settings

logger = logging.getLogger(__name__)


class TelegramSender:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Bot API."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.bot_token = settings.TELEGRAM_BOT_TOKEN
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"

    async def send_message(
        self,
        chat_id: int,
        text: str,
        parse_mode: str = "HTML",
        reply_markup: Optional[dict] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

        Args:
            chat_id: ID —á–∞—Ç–∞ –≤ Telegram
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML/Markdown)
            reply_markup: Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            url = f"{self.base_url}/sendMessage"

            payload = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": parse_mode
            }

            if reply_markup:
                payload["reply_markup"] = reply_markup

            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.post(url, json=payload)
                response.raise_for_status()

            logger.info(f"Message sent to chat_id={chat_id}")
            return True

        except Exception as e:
            logger.error(f"Error sending message to chat_id={chat_id}: {str(e)}")
            return False

    def format_morning_message(self, user_name: str, task: dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º.

        Args:
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            task: –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        return (
            f"‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {user_name}!\n\n"
            f"üìã <b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
            f"{task.get('title', '–ó–∞–¥–∞–Ω–∏–µ')}\n\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
            f"{task.get('description', '')}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /today —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ."
        )

    def format_evening_reminder(self, task: dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.

        Args:
            task: –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        return (
            f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
            f"–£ –≤–∞—Å –µ—â—ë –µ—Å—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n"
            f"üìã {task.get('title', '–ó–∞–¥–∞–Ω–∏–µ')}\n\n"
            f"–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å!\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /today –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è."
        )


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
telegram_sender = TelegramSender()
