"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Backend API.
"""

import logging
from contextlib import asynccontextmanager
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from app.core.config import settings
from app.core.database import close_db

logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Lifespan context manager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    # Startup
    import sys
    print(f"üöÄ Starting {settings.APP_NAME}", flush=True)
    sys.stdout.flush()
    print(f"üêõ Debug mode: {settings.DEBUG}", flush=True)
    sys.stdout.flush()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Telegram Bot Token)
    scheduler = None
    if settings.TELEGRAM_BOT_TOKEN:
        print("üìã TELEGRAM_BOT_TOKEN found, starting scheduler...", flush=True)
        sys.stdout.flush()
        from app.services.task_scheduler import task_scheduler
        task_scheduler.start()
        scheduler = task_scheduler
        print("‚úÖ Task scheduler started successfully", flush=True)
        sys.stdout.flush()
        print(f"üìÖ Morning tasks: {settings.MORNING_TASK_TIME}, Evening reminders: {settings.EVENING_REMINDER_TIME}", flush=True)
        sys.stdout.flush()
    else:
        print("‚ö†Ô∏è  TELEGRAM_BOT_TOKEN not set, scheduler disabled", flush=True)
        sys.stdout.flush()

    yield

    # Shutdown
    logger.info("Shutting down application...")

    if scheduler:
        scheduler.stop()
        logger.info("Task scheduler stopped")

    await close_db()


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI(
    title=settings.APP_NAME,
    version="1.0.0",
    description="API –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥-–±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–¥–∞—á, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
    debug=settings.DEBUG,
    lifespan=lifespan,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.BACKEND_CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/", tags=["Health"])
async def root():
    """
    –ö–æ—Ä–Ω–µ–≤–æ–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API.
    """
    return {
        "message": "Psychology Bot API",
        "status": "running",
        "version": "1.0.0"
    }


@app.get("/health", tags=["Health"])
async def health_check():
    """
    Health check endpoint –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ Docker healthcheck.
    """
    return {
        "status": "healthy",
        "service": settings.APP_NAME
    }


# –ò–º–ø–æ—Ä—Ç –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
from app.api.v1.endpoints import auth, users, tasks, admin

app.include_router(auth.router, prefix=f"{settings.API_V1_PREFIX}/auth", tags=["Auth"])
app.include_router(users.router, prefix=f"{settings.API_V1_PREFIX}/users", tags=["Users"])
app.include_router(tasks.router, prefix=f"{settings.API_V1_PREFIX}/tasks", tags=["Tasks"])
app.include_router(admin.router, prefix=f"{settings.API_V1_PREFIX}/admin", tags=["Admin"])
