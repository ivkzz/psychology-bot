"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞.
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
"""

import logging
import html
import json
import traceback
from telegram import Update
from telegram.ext import Application, ContextTypes
from telegram.constants import ParseMode
from bot.config import bot_settings
from bot.services.api_client import api_client
from bot.services.scheduler import TaskScheduler

# –ò–º–ø–æ—Ä—Ç handlers
from bot.handlers.start import registration_handler
from bot.handlers.commands import (
    help_handler,
    today_handler,
    progress_handler,
    cancel_handler
)
from bot.handlers.conversations import complete_task_handler
from bot.handlers.callbacks import callback_handlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=getattr(logging, bot_settings.LOG_LEVEL)
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = None


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞.
    –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
    """
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    logger.error("Exception while handling an update:", exc_info=context.error)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ª–æ–≥–æ–≤
    tb_list = traceback.format_exception(None, context.error, context.error.__traceback__)
    tb_string = "".join(tb_list)

    update_str = update.to_dict() if isinstance(update, Update) else str(update)

    error_message = (
        f"An exception was raised while handling an update\n"
        f"<pre>update = {html.escape(json.dumps(update_str, indent=2, ensure_ascii=False))}</pre>\n\n"
        f"<pre>{html.escape(tb_string)}</pre>"
    )

    logger.error(error_message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if isinstance(update, Update) and update.effective_message:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
            error_text = "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

            if context.error and hasattr(context.error, "response"):
                # –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞
                status_code = getattr(context.error.response, "status_code", None)

                if status_code in [401, 403]:
                    error_text = (
                        "üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ: /start"
                    )

            await update.effective_message.reply_text(error_text)

        except Exception as e:
            logger.error(f"Error sending error message to user: {e}")


async def post_init(application: Application) -> None:
    """
    Callback –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Backend API –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.

    Args:
        application: –û–±—ä–µ–∫—Ç Application
    """
    logger.info("Telegram bot initialized successfully")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Backend API
    api_available = await api_client.health_check()

    if api_available:
        logger.info("Backend API is available")
    else:
        logger.warning("Backend API is not available! Bot may not work correctly.")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    global scheduler
    scheduler = TaskScheduler(application)
    scheduler.start()

    logger.info("Bot startup completed")


async def post_shutdown(application: Application) -> None:
    """
    Callback –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.

    Args:
        application: –û–±—ä–µ–∫—Ç Application
    """
    logger.info("Shutting down bot...")

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    global scheduler
    if scheduler:
        scheduler.stop()
        logger.info("Scheduler stopped")

    logger.info("Bot shutdown completed")


def main() -> None:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    –°–æ–∑–¥–∞–µ—Ç Application, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç handlers –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞.
    """
    logger.info("Starting Psychology Bot...")

    # –°–æ–∑–¥–∞–µ–º Application
    application = (
        Application.builder()
        .token(bot_settings.TELEGRAM_BOT_TOKEN)
        .post_init(post_init)
        .post_shutdown(post_shutdown)
        .build()
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è handlers (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!)

    # 1. ConversationHandlers (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–≤—ã–º–∏)
    application.add_handler(registration_handler)
    application.add_handler(complete_task_handler)

    # 2. –û–±—ã—á–Ω—ã–µ CommandHandlers
    application.add_handler(help_handler)
    application.add_handler(today_handler)
    application.add_handler(progress_handler)
    application.add_handler(cancel_handler)

    # 3. CallbackQueryHandlers
    for callback_handler in callback_handlers:
        application.add_handler(callback_handler)

    # 4. Error handler (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("Bot is running. Press Ctrl+C to stop.")
    logger.info(f"Registered {len(application.handlers[0])} handlers")

    application.run_polling(
        allowed_updates=["message", "callback_query"],
        drop_pending_updates=True
    )


if __name__ == "__main__":
    main()
