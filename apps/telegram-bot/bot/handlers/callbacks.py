"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback_query (inline –∫–Ω–æ–ø–æ–∫) Telegram –±–æ—Ç–∞.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ö.
"""

import logging
from telegram import Update
from telegram.ext import CallbackQueryHandler, ContextTypes
from bot.services.api_client import api_client
from bot.utils.keyboards import (
    get_main_menu_keyboard,
    get_task_keyboard,
    get_task_completed_keyboard,
    get_skip_keyboard
)
from bot.utils.messages import Messages

logger = logging.getLogger(__name__)


async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )


async def handle_today_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ".

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    query = update.callback_query
    await query.answer()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    token = context.user_data.get("token")

    if not token:
        await query.edit_message_text(Messages.ERROR_NO_TOKEN)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    task = await api_client.get_today_task(token)

    if not task:
        await query.edit_message_text(
            Messages.NO_TASK_TODAY,
            reply_markup=get_main_menu_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
    if task.get("status") == "completed":
        await query.edit_message_text(
            Messages.TASK_ALREADY_COMPLETED,
            reply_markup=get_main_menu_keyboard()
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ context –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
    context.user_data["current_task"] = task

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
    message = Messages.format_task(task)

    await query.edit_message_text(
        message,
        reply_markup=get_task_keyboard(task.get("id")),
        parse_mode="HTML"
    )


async def handle_my_progress(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å".

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    query = update.callback_query
    await query.answer()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    token = context.user_data.get("token")

    if not token:
        await query.edit_message_text(Messages.ERROR_NO_TOKEN)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    progress = await api_client.get_user_progress(token)

    if not progress:
        await query.edit_message_text(
            Messages.ERROR_GENERAL,
            reply_markup=get_main_menu_keyboard()
        )
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    message = Messages.format_progress(progress)

    await query.edit_message_text(
        message,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML"
    )


async def handle_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å".

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        Messages.HELP_MESSAGE,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML"
    )


async def handle_complete_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–ø–æ–ª–Ω–∏—Ç—å" –¥–ª—è –∑–∞–¥–∞–Ω–∏—è.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º task_id –∏–∑ callback_data
    task_id = query.data.replace("complete_task_", "")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞–Ω–∏—è
    context.user_data["current_task_id"] = task_id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    await query.message.reply_text(
        Messages.ASK_TASK_ANSWER,
        reply_markup=get_skip_keyboard()
    )

    # –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –æ–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç (–¥–ª—è ConversationHandler)
    context.user_data["awaiting_task_answer"] = True


async def handle_task_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –¥–ª—è –∑–∞–¥–∞–Ω–∏—è.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏.

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º task_id –∏–∑ callback_data
    task_id = query.data.replace("task_details_", "")

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –∫–µ—à–∞ (–±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ handle_today_task)
    task = context.user_data.get("current_task")

    if not task:
        await query.edit_message_text(
            Messages.ERROR_GENERAL,
            reply_markup=get_main_menu_keyboard()
        )
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    message = Messages.format_task_details(task)

    await query.edit_message_text(
        message,
        reply_markup=get_task_keyboard(task_id),
        parse_mode="HTML"
    )


async def handle_skip(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å".

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    query = update.callback_query
    await query.answer()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    token = context.user_data.get("token")
    task_id = context.user_data.get("current_task_id")

    if not token or not task_id:
        await query.edit_message_text(Messages.ERROR_GENERAL)
        return

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
    result = await api_client.complete_task(
        assignment_id=task_id,
        answer_text=None,
        token=token
    )

    if result:
        await query.edit_message_text(
            Messages.TASK_COMPLETED_SUCCESS,
            reply_markup=get_task_completed_keyboard()
        )

        logger.info(f"Task {task_id} completed (skipped) by user {update.effective_user.id}")

    else:
        await query.edit_message_text(
            Messages.ERROR_GENERAL,
            reply_markup=get_main_menu_keyboard()
        )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop("current_task_id", None)
    context.user_data.pop("awaiting_task_answer", None)


async def handle_task_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–≥–¥–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ.

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ
    if not context.user_data.get("awaiting_task_answer"):
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    token = context.user_data.get("token")
    task_id = context.user_data.get("current_task_id")

    if not token or not task_id:
        await update.message.reply_text(Messages.ERROR_GENERAL)
        context.user_data.pop("awaiting_task_answer", None)
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    answer_text = update.message.text.strip()

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ API
    result = await api_client.complete_task(
        assignment_id=task_id,
        answer_text=answer_text if answer_text else None,
        token=token
    )

    if result:
        # –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        progress = await api_client.get_user_progress(token)

        success_message = Messages.TASK_COMPLETED_SUCCESS

        if progress:
            success_message += f"\n\n{Messages.format_progress(progress)}"

        await update.message.reply_text(
            success_message,
            reply_markup=get_task_completed_keyboard(),
            parse_mode="HTML"
        )

        logger.info(f"Task {task_id} completed by user {update.effective_user.id}")

    else:
        # –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        await update.message.reply_text(
            Messages.ERROR_GENERAL,
            reply_markup=get_main_menu_keyboard()
        )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop("current_task_id", None)
    context.user_data.pop("awaiting_task_answer", None)


# –°–æ–∑–¥–∞–µ–º handlers –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ callback
callback_handlers = [
    CallbackQueryHandler(handle_main_menu, pattern="^main_menu$"),
    CallbackQueryHandler(handle_today_task, pattern="^today_task$"),
    CallbackQueryHandler(handle_my_progress, pattern="^my_progress$"),
    CallbackQueryHandler(handle_help, pattern="^help$"),
    CallbackQueryHandler(handle_complete_task, pattern="^complete_task_"),
    CallbackQueryHandler(handle_task_details, pattern="^task_details_"),
    CallbackQueryHandler(handle_skip, pattern="^skip$"),
]
