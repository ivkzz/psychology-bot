"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç APScheduler –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.
"""

import logging
from datetime import datetime
from typing import TYPE_CHECKING
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from bot.config import bot_settings
from bot.services.api_client import api_client

if TYPE_CHECKING:
    from telegram.ext import Application

logger = logging.getLogger(__name__)


class TaskScheduler:
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –±–æ—Ç–∞.
    """

    def __init__(self, app: "Application"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.

        Args:
            app: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram Application
        """
        self.app = app
        self.scheduler = AsyncIOScheduler(
            timezone=bot_settings.SCHEDULER_TIMEZONE
        )

    async def send_morning_tasks(self):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
        –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 09:00.
        """
        try:
            logger.info("Sending morning tasks...")

            if not bot_settings.ADMIN_TOKEN:
                logger.error("ADMIN_TOKEN not configured, skipping morning tasks")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await api_client.get_all_users(bot_settings.ADMIN_TOKEN)

            if not users:
                logger.info("No users found or error getting users")
                return

            success_count = 0
            error_count = 0

            for user in users:
                try:
                    telegram_id = user.get("telegram_id")
                    if not telegram_id:
                        continue

                    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_data = await api_client.get_user_by_telegram_id(telegram_id)
                    if not user_data or "access_token" not in user_data:
                        logger.warning(f"Cannot get token for user {telegram_id}")
                        continue

                    token = user_data["access_token"]

                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                    task = await api_client.get_today_task(token)

                    if not task:
                        logger.info(f"No task for user {telegram_id}")
                        continue

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = (
                        f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! {user.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}\n\n"
                        f"üìã <b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
                        f"{task.get('title', '–ó–∞–¥–∞–Ω–∏–µ')}\n\n"
                        f"{task.get('description', '')}\n"
                    )

                    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    keyboard = [
                        [
                            InlineKeyboardButton(
                                "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å",
                                callback_data=f"complete_task_{task.get('id')}"
                            ),
                            InlineKeyboardButton(
                                "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ",
                                callback_data=f"task_details_{task.get('id')}"
                            )
                        ]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self.app.bot.send_message(
                        chat_id=telegram_id,
                        text=message,
                        reply_markup=reply_markup,
                        parse_mode="HTML"
                    )

                    success_count += 1
                    logger.info(f"Morning task sent to user {telegram_id}")

                except Exception as e:
                    error_count += 1
                    logger.error(f"Error sending morning task to user: {str(e)}")

            logger.info(
                f"Morning tasks sent: {success_count} success, {error_count} errors"
            )

        except Exception as e:
            logger.error(f"Error in send_morning_tasks: {str(e)}")

    async def send_evening_reminder(self):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–µ–º, –∫—Ç–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ.
        –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ 20:00.
        """
        try:
            logger.info("Sending evening reminders...")

            if not bot_settings.ADMIN_TOKEN:
                logger.error("ADMIN_TOKEN not configured, skipping evening reminders")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await api_client.get_all_users(bot_settings.ADMIN_TOKEN)

            if not users:
                logger.info("No users found")
                return

            success_count = 0
            error_count = 0

            for user in users:
                try:
                    telegram_id = user.get("telegram_id")
                    if not telegram_id:
                        continue

                    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_data = await api_client.get_user_by_telegram_id(telegram_id)
                    if not user_data or "access_token" not in user_data:
                        continue

                    token = user_data["access_token"]

                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                    task = await api_client.get_today_task(token)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ
                    if task and task.get("status") != "completed":
                        message = (
                            f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
                            f"–£ –≤–∞—Å –µ—â—ë –µ—Å—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n"
                            f"üìã {task.get('title', '–ó–∞–¥–∞–Ω–∏–µ')}\n\n"
                            f"–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å!"
                        )

                        keyboard = [
                            [
                                InlineKeyboardButton(
                                    "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–µ–π—á–∞—Å",
                                    callback_data=f"complete_task_{task.get('id')}"
                                )
                            ]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)

                        await self.app.bot.send_message(
                            chat_id=telegram_id,
                            text=message,
                            reply_markup=reply_markup,
                            parse_mode="HTML"
                        )

                        success_count += 1
                        logger.info(f"Evening reminder sent to user {telegram_id}")

                except Exception as e:
                    error_count += 1
                    logger.error(f"Error sending evening reminder: {str(e)}")

            logger.info(
                f"Evening reminders sent: {success_count} success, {error_count} errors"
            )

        except Exception as e:
            logger.error(f"Error in send_evening_reminder: {str(e)}")

    def start(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏.
        """
        logger.info("Starting task scheduler...")

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        morning_hour, morning_minute = map(int, bot_settings.MORNING_TASK_TIME.split(":"))
        evening_hour, evening_minute = map(int, bot_settings.EVENING_REMINDER_TIME.split(":"))

        # –£—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        self.scheduler.add_job(
            self.send_morning_tasks,
            trigger=CronTrigger(
                hour=morning_hour,
                minute=morning_minute,
                timezone=bot_settings.SCHEDULER_TIMEZONE
            ),
            id="morning_tasks",
            name="Send morning tasks",
            replace_existing=True
        )

        # –í–µ—á–µ—Ä–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        self.scheduler.add_job(
            self.send_evening_reminder,
            trigger=CronTrigger(
                hour=evening_hour,
                minute=evening_minute,
                timezone=bot_settings.SCHEDULER_TIMEZONE
            ),
            id="evening_reminders",
            name="Send evening reminders",
            replace_existing=True
        )

        self.scheduler.start()
        logger.info(
            f"Task scheduler started successfully. "
            f"Morning tasks: {bot_settings.MORNING_TASK_TIME}, "
            f"Evening reminders: {bot_settings.EVENING_REMINDER_TIME}"
        )

    def stop(self):
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
        """
        logger.info("Stopping task scheduler...")
        self.scheduler.shutdown()
        logger.info("Task scheduler stopped")

    def get_scheduled_jobs(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.

        Returns:
            list: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
        """
        return self.scheduler.get_jobs()
