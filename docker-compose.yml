services:
  postgres:
    image: postgres:18-alpine
    container_name: psychologist_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-psychology_bot}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: ${DOCKER_RESTART_POLICY:-unless-stopped}
    networks:
      - app-network

  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: psychologist_backend
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-15}
      REFRESH_TOKEN_EXPIRE_DAYS: ${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      DEBUG: ${DEBUG:-false}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      SCHEDULER_TIMEZONE: ${SCHEDULER_TIMEZONE:-Europe/Moscow}
      MORNING_TASK_TIME: ${MORNING_TASK_TIME:-09:00}
      EVENING_REMINDER_TIME: ${EVENING_REMINDER_TIME:-20:00}
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@psychologist-bot.com}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
      ADMIN_NAME: ${ADMIN_NAME:-Admin}
    volumes:
      - ./apps/backend:/app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: ${DOCKER_RESTART_POLICY:-unless-stopped}
    networks:
      - app-network
    command: >
      sh -c "
        alembic upgrade head &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  telegram-bot:
    build:
      context: ./apps/telegram-bot
      dockerfile: Dockerfile
    container_name: psychologist_telegram_bot
    environment:
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      BACKEND_API_URL: http://backend:8000
      DATABASE_URL: ${DATABASE_URL}
    volumes:
      - ./apps/telegram-bot:/app
    depends_on:
      backend:
        condition: service_started
      postgres:
        condition: service_healthy
    restart: ${DOCKER_RESTART_POLICY:-unless-stopped}
    networks:
      - app-network

  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
      target: production
    container_name: psychologist_frontend
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_started
    restart: ${DOCKER_RESTART_POLICY:-unless-stopped}
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge
